#!/usr/bin/env bash

set -e
set -o pipefail

install_mongodb_tools() {
  local install_type=$1
  local version=$2
  local install_path=$3

	local name=$(get_name)
	local arch=$(get_arch)
	local bin_install_path="$install_path/bin"


	local download_url=$(get_download_url "$version" "$name" "$arch")

  if [ "$TMPDIR" = "" ]; then
    local tmp_download_dir=$(mktemp -d -t mongodb-tools_XXXXXX)
  else
    local tmp_download_dir=$TMPDIR
  fi

  echo "Downloading mongodb tools from ${download_url} to ${tmp_download_dir}"

  # capture error message from curl in memory
  curl --retry 10 --retry-delay 2 -fLo $tmp_download_dir $download_url 2> >(tee /tmp/curl_error >&2)
  ERROR=$(</tmp/curl_error)

  # retry with http1.1 if http2 error
  if [[ $ERROR == *"HTTP/2 stream 0 was not closed cleanly"* ]]; then
    echo $ERROR
    echo "Retrying with --http1.1"
    curl --http1.1 --retry 10 --retry-delay 2 -fLo $download_path $download_url
  fi

  if [ $? -ne 0 ]; then
    echo $ERROR
    echo "Failed to download mongodb tools from ${download_url}"
    exit 1
  fi

  echo "Creating bin directory"
  mkdir -p "${bin_install_path}"

  echo "Copying binary"
  tar -zxf ${download_path} --directory $tmp_download_dir
  cp ${tmp_download_dir}/bin ${bin_install_path}
}

get_os_name() {
  if command -v lsb_release &>/dev/null; then
    lsb_release -si | awk '{print tolower($0)}'
  elif [ -f /etc/os-release ]; then
    grep -i '^ID=' /etc/os-release | cut -d= -f2 | tr -d '"' | awk '{print tolower($0)}'
  elif [ -f /etc/redhat-release ]; then
    awk '{print tolower($1)}' /etc/redhat-release
  else
    uname -s | awk '{print tolower($0)}'
  fi
}

get_arch() {
  arch=$(uname -m)

  case "$arch" in
    x86_64 | amd64)
      echo "x86_64"
      ;;
    aarch64 | arm64)
      echo "arm64"
      ;;
    armv7l)
      echo "armv7"
      ;;
    i386 | i686)
      echo "x86"
      ;;
    *)
      echo "$arch"
      ;;
  esac
}

get_os_version() {
  local version

  if command -v lsb_release &>/dev/null; then
    version=$(lsb_release -sr)
  elif [ -f /etc/os-release ]; then
    version=$(grep -i '^VERSION_ID=' /etc/os-release | cut -d= -f2 | tr -d '"')
  elif [ -f /etc/redhat-release ]; then
    version=$(awk '{print $3}' /etc/redhat-release)
  else
    version=$(uname -r)
  fi

  echo "$version" | tr -cd '[:alnum:]'
}

function get_name() {
	os_name=$(get_os_name)
	os_version=$(get_os_version)
	echo "$os_name$os_version"
}

get_download_url() {
  local version="$1"
  local name="$2"
  local arch="$3"

  echo "version: $version"
  echo "name: $name"
  echo "arch: $arch"

  url=$(curl -s https://s3.amazonaws.com/downloads.mongodb.org/tools/db/full.json |
    jq -r --arg version "$version" --arg name "$name" --arg arch "$arch" '
      .versions[]
      | select(.version == $version)
      | .downloads[]
      | select(.name == $name and .arch == $arch)
      | .archive.url
    ')

  echo "$url"
}

install_mongodb_tools "$ASDF_INSTALL_TYPE" "$ASDF_INSTALL_VERSION" "$ASDF_INSTALL_PATH"
